SELECT
    name,
    {% filter geometry %}way{% endfilter %} AS __geometry__,
    osm_id AS __id__,
    way_area AS area,
    cuisine,
    religion,
    sport,
    transit_routes,
    %#tags AS tags,
    COALESCE("aerialway", "aeroway", "amenity", "barrier", "craft", "highway", "historic",
             "leisure", "lock", "man_made", "natural", "office", "power", "railway", "shop",
             "tourism", "waterway") AS kind

FROM (

  SELECT
    name, way, 0::real AS way_area, mz_poi_min_zoom AS min_zoom,
    osm_id,
    cuisine, religion, sport,
    aerialway, aeroway, amenity, barrier, craft, highway, historic, leisure, lock, man_made, "natural", office, power, railway, shop, tourism, waterway,
    -- note: the mz_calculate_transit_routes function is pretty expensive,
    -- so we only want to calculate it when we actually need the result.
    CASE
      WHEN railway='station' AND osm_id > 0
        THEN mz_calculate_transit_routes(osm_id)
      ELSE NULL::text[]
    END AS transit_routes,
    tags

  FROM
    planet_osm_point

  WHERE
    {{ bounds|bbox_filter('way') }}
    AND mz_poi_min_zoom <= {{ zoom }}

UNION ALL

  SELECT
    name, way, way_area, mz_poi_min_zoom AS min_zoom,
    osm_id,
    cuisine, religion, sport,
    aerialway, aeroway, amenity, barrier, craft, highway, historic, leisure, lock, man_made, "natural", office, power, railway, shop, tourism, waterway,
    NULL AS transit_routes,
    tags

  FROM
    planet_osm_polygon

  WHERE
    {{ bounds|bbox_filter('way') }}
    AND mz_poi_min_zoom <= {{ zoom }}

) points_and_centroids
